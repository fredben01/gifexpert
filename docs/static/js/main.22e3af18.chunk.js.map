{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","action","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","props","categories","i","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAiBhD,OACE,sBAAMC,OAAO,GAAGC,SAVG,SAACC,GACpBA,EAAEC,iBAEEL,EAAWM,OAAOC,OAAS,IAC7BT,GAAc,SAACU,GAAD,OAAWR,GAAX,mBAA0BQ,OACxCP,EAAc,MAKhB,SACE,uBAAOQ,KAAK,OAAOC,MAAOV,EAAYW,SAhBhB,SAACP,GAEzBH,EAAcG,EAAEQ,OAAOF,a,+BCRdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UACpDH,GAFmB,+DAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXjB,kBAedM,GAfc,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGvC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCYKO,EAhBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDN,SAACA,GAAc,IAAD,EACdf,mBAAS,CACjCsB,KAAM,GACNa,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACC,GAAD,OACrBH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAACpB,IAEGqB,EDb2BK,CAAa1B,GAAjCa,EADkB,EACxBN,KAAca,EADU,EACVA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,qBACZ,qBAAKA,UAAU,YAAf,SACGH,EAAOJ,KAAI,SAACC,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEcjBgB,EAvBM,SAACC,GAAW,IAAD,EACM3C,mBAAS,CAAC,QADhB,mBACvB4C,EADuB,KACX7C,EADW,KAQ9B,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BACG6C,EAAWpB,KAAI,SAACT,EAAU8B,GAAX,OACd,cAAC,EAAD,CAAwB9B,SAAUA,GAApBA,Y,MCfxB+B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.22e3af18.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    // console.log(e.target.value);\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((cats) => [inputValue, ...cats]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form action=\"\" onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=ZU6pDUrUEis6MEs26gzgv9vwe6a55QoI`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import React from 'react';\n\nexport const GifGridItem = ({ id, title, url }) => {\n  // console.log({ id, title, url });\n\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n      {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default GifGrid;\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) =>\n      setstate({\n        data: imgs,\n        loading: false,\n      })\n    );\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = (props) => {\n  const [categories, setCategories] = useState(['Cat']);\n\n  // const handleAdd = () => {\n  //   // setCategories([...categories, 'new']);\n  //   setCategories((cats) => [...cats, 'new']);\n  // };\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {categories.map((category, i) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\n"],"sourceRoot":""}